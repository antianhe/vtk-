# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '最终不改版.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

import matplotlib.pyplot as plt
import numpy
import numpy as np
import SimpleITK as sitk
import vtk
import webcolors
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FC
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal
from vtk.qt.QVTKRenderWindowInteractor import \
    QVTKRenderWindowInteractor as QVTKWidget





class MainWindow(QtWidgets.QMainWindow,object):
    signal=pyqtSignal()
    signal2=pyqtSignal()
    signal3=pyqtSignal()
    signal4=pyqtSignal(int)
    
    def __init__(self):#self类的对象本身,
        super(MainWindow, self).__init__()
        
        self.propVolume = vtk.vtkVolumeProperty()
        self.reader1 = vtk.vtkMetaImageReader()
        self.planeWidgetY = vtk.vtkImagePlaneWidget()
        self.planeWidgetx = vtk.vtkImagePlaneWidget()
        self.planeWidgetz = vtk.vtkImagePlaneWidget()
        self.pointsItem = vtk.vtkCompositeControlPointsItem()
        self.functionsItem = vtk.vtkCompositeTransferFunctionItem()#复合传递函数项,会出一条线和下面的颜色
        self.color1 = [1,0,0,0]
        self.color2 = [0,1,0,0]
        self.color3 = [0,0,1,0]
        self.color4 = [0,0,0,1]
        self.color5 = [0,1,0,0]
        self.color6 = [0,1,0,0]
        self.a=0
        self.b=0
        self.setupUi(self)
       # self.propVolume=vtk.propVolume()
        #后面加了类名后，可以用了
    def colorchange(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color1 = color.getRgb()

    def colorchange2(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color2 = color.getRgb()
    def colorchange3(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color3= color.getRgb()
    def colorchange4(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color4 = color.getRgb()   
    def colorchange5(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color5 = color.getRgb()   
    def colorchange6(self):           
        color = QtWidgets.QColorDialog.getColor()
        self.color6 = color.getRgb()   
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1951, 1009)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.qvtkWidget_5 = QVTKWidget(self.centralwidget)
        self.qvtkWidget_5.setMinimumSize(QtCore.QSize(600, 400))
        self.qvtkWidget_5.setMaximumSize(QtCore.QSize(900, 400))
        self.qvtkWidget_5.setObjectName("qvtkWidget_5")
        self.verticalLayout_14.addWidget(self.qvtkWidget_5)
        self.renderer5 = vtk.vtkRenderer()
        self.renderer5.SetBackground(.0, .0, .0)
        #self.renderer3.SetViewport(0.5,0,1.0,1.0)
        self.render_window5 = self.qvtkWidget_5.GetRenderWindow()#     
        self.render_window5.AddRenderer(self.renderer5)
        self.iren5 = self.render_window5.GetInteractor()  
        self.iren5.Initialize()
        self.iren5.Start()
        #####################################
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(MainWindow.colorchange)
        self.pushButton.clicked.connect(MainWindow.color)
        self.verticalLayout_7.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(MainWindow.colorchange2)
        self.pushButton_2.clicked.connect(MainWindow.color)
        self.verticalLayout_7.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_7.addWidget(self.pushButton_3)
        self.pushButton_3.clicked.connect(MainWindow.colorchange3)
        self.pushButton_3.clicked.connect(MainWindow.color)

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout_7.addWidget(self.pushButton_4)
        self.pushButton_4.clicked.connect(MainWindow.colorchange4)
        self.pushButton_4.clicked.connect(MainWindow.color)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout_7.addWidget(self.pushButton_5)
        self.pushButton_5.clicked.connect(MainWindow.colorchange5)
        self.pushButton_5.clicked.connect(MainWindow.color)

        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_7.addWidget(self.pushButton_6)
        self.pushButton_6.clicked.connect(MainWindow.colorchange6)
        self.pushButton_6.clicked.connect(MainWindow.color)
        self.verticalLayout_6.addLayout(self.verticalLayout_7)
                                             ########################################################颜色按钮##########################################################
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_6.addWidget(self.label_2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_6)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        
        self.horizontalSlider_12 = QtWidgets.QSlider(self.centralwidget)
        
        self.horizontalSlider_12.setMinimum(0)
        
        self.horizontalSlider_12.setSingleStep(1)
        self.horizontalSlider_12.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_12.setObjectName("horizontalSlider_12")
        self.verticalLayout_9.addWidget(self.horizontalSlider_12)
        self.horizontalSlider_12.valueChanged.connect(MainWindow.tidu1)
        


        self.horizontalSlider_13 = QtWidgets.QSlider(self.centralwidget)
       
        self.horizontalSlider_13.setMinimum(0)
        
        self.horizontalSlider_13.setSingleStep(1)
        self.horizontalSlider_13.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_13.setObjectName("horizontalSlider_13")
        self.verticalLayout_9.addWidget(self.horizontalSlider_13)
        self.horizontalSlider_13.valueChanged.connect(MainWindow.tidu1)
        

        self.horizontalSlider_14 = QtWidgets.QSlider(self.centralwidget)

       
        self.horizontalSlider_14.setMinimum(0)
       
        self.horizontalSlider_14.setSingleStep(1)
        self.horizontalSlider_14.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_14.setObjectName("horizontalSlider_14")
        self.verticalLayout_9.addWidget(self.horizontalSlider_14)
        self.horizontalSlider_14.valueChanged.connect(MainWindow.tidu1)
        self.horizontalSlider_15 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_15.setMinimum(0)
       
       
        self.horizontalSlider_15.setSingleStep(1)
        self.horizontalSlider_15.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_15.setObjectName("horizontalSlider_15")
        self.verticalLayout_9.addWidget(self.horizontalSlider_15)
        self.horizontalSlider_15.valueChanged.connect(MainWindow.tidu1)

        self.horizontalSlider_16 = QtWidgets.QSlider(self.centralwidget)
        
        self.horizontalSlider_16.setMinimum(0)
 
       
        self.horizontalSlider_16.setSingleStep(1)
        self.horizontalSlider_16.setMinimumSize(QtCore.QSize(530, 0))
        self.horizontalSlider_16.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_16.setObjectName("horizontalSlider_16")
        self.verticalLayout_9.addWidget(self.horizontalSlider_16)
        self.horizontalSlider_16.valueChanged.connect(MainWindow.tidu1)

        self.horizontalSlider_17 = QtWidgets.QSlider(self.centralwidget)
        
        self.horizontalSlider_17.setMinimum(0)
        
       
        self.horizontalSlider_17.setSingleStep(1)
        self.horizontalSlider_17.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_17.setObjectName("horizontalSlider_17")
        self.verticalLayout_9.addWidget(self.horizontalSlider_17)
        self.horizontalSlider_17.valueChanged.connect(MainWindow.tidu1)
        
        

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout_9.addWidget(self.label)
        self.horizontalLayout.addLayout(self.verticalLayout_9)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")

        self.lcdNumber_7 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_7.setRange(0,1)#设置范围
        self.lcdNumber_7.setSingleStep(0.1)
        self.lcdNumber_7.setValue(0.0)



        self.lcdNumber_7.valueChanged.connect(self.tidu1)###################################不透明度############################################
       
        self.lcdNumber_7.setObjectName("lcdNumber_7")
        self.verticalLayout_8.addWidget(self.lcdNumber_7)

        self.lcdNumber_8 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_8.setRange(0,1)#设置范围
        self.lcdNumber_8.setSingleStep(0.1)
        self.lcdNumber_8.setValue(0.2)
        self.lcdNumber_8.valueChanged.connect(self.tidu1)
        self.lcdNumber_8.setObjectName("lcdNumber_8")
        self.verticalLayout_8.addWidget(self.lcdNumber_8)

        self.lcdNumber_9 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_9.setRange(0,1)#设置范围
        self.lcdNumber_9.setSingleStep(0.1)
        self.lcdNumber_9.setValue(0.4)
        self.lcdNumber_9.valueChanged.connect(self.tidu1)
        self.lcdNumber_9.setObjectName("lcdNumber_9")
        self.verticalLayout_8.addWidget(self.lcdNumber_9)

        self.lcdNumber_10 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_10.setRange(0,1)#设置范围
        self.lcdNumber_10.setSingleStep(0.1)
        self.lcdNumber_10.setValue(0.6)
        self.lcdNumber_10.valueChanged.connect(self.tidu1)
        self.lcdNumber_10.setObjectName("lcdNumber_10")
        self.verticalLayout_8.addWidget(self.lcdNumber_10)

        self.lcdNumber_11 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_11.setRange(0,1)#设置范围
        self.lcdNumber_11.setSingleStep(0.1)
        self.lcdNumber_11.setValue(0.8)
        self.lcdNumber_11.valueChanged.connect(self.tidu1)
        self.lcdNumber_11.setObjectName("lcdNumber_11")
        self.verticalLayout_8.addWidget(self.lcdNumber_11)

        self.lcdNumber_12 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_12.setRange(0,1)#设置范围
        self.lcdNumber_12.setSingleStep(0.1)
        self.lcdNumber_12.setValue(1)
        self.lcdNumber_12.valueChanged.connect(self.tidu1)
        self.lcdNumber_12.setObjectName("lcdNumber_12")
        self.verticalLayout_8.addWidget(self.lcdNumber_12)

        self.horizontalLayout.addLayout(self.verticalLayout_8)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.horizontalLayout_2.addLayout(self.verticalLayout_5)
        self.verticalLayout_14.addLayout(self.horizontalLayout_2)
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")

        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_14.addWidget(self.label_4)
        

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_14.addWidget(self.label_5) 


        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_14.addWidget(self.label_6)



        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setMaximumSize(QtCore.QSize(16777215, 15))
        self.label_3.setObjectName("label_3")

        self.verticalLayout_13.addWidget(self.label_3)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")

        self.doubleSpinBox_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)#########################光照########数字输入####################################
        self.doubleSpinBox_2.setRange(0,1)#设置范围
        self.doubleSpinBox_2.setSingleStep(0.1)
        self.doubleSpinBox_2.setValue(0.2)
        self.doubleSpinBox_2.setObjectName("doubleSpinBox_2")
        self.verticalLayout_10.addWidget(self.doubleSpinBox_2)
        self.doubleSpinBox_2.valueChanged.connect(self.guangzhao)

        self.doubleSpinBox_3 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox_3.setRange(0,1)#设置范围
        self.doubleSpinBox_3.setSingleStep(0.1)
        self.doubleSpinBox_3.setValue(0.4)
        self.doubleSpinBox_3.setObjectName("doubleSpinBox_3")
        self.verticalLayout_10.addWidget(self.doubleSpinBox_3)
        self.doubleSpinBox_3.valueChanged.connect(self.guangzhao)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setRange(0,1)#设置范围
        self.doubleSpinBox.setSingleStep(0.1)
        self.doubleSpinBox.setValue(0.4)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.verticalLayout_10.addWidget(self.doubleSpinBox)
        self.doubleSpinBox.valueChanged.connect(self.guangzhao)

        self.horizontalLayout_3.addLayout(self.verticalLayout_10)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")



        self.horizontalSlider_5 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_5.setValue(10)
        self.horizontalSlider_5.setMinimum(0)
        self.horizontalSlider_5.setMaximum(255)
        self.horizontalSlider_5.setSingleStep(1)
        self.horizontalSlider_5.valueChanged.connect(MainWindow.fungradient)
        self.horizontalSlider_5.setMinimumSize(QtCore.QSize(530, 0))
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")

        self.verticalLayout_11.addWidget(self.horizontalSlider_5)

        self.horizontalSlider_6 = QtWidgets.QSlider(self.centralwidget)################################梯度调节###########################################
        self.horizontalSlider_6.setValue(50)
        self.horizontalSlider_6.setMinimum(0)
        self.horizontalSlider_6.setMaximum(255)
        self.horizontalSlider_6.setSingleStep(1)
        self.horizontalSlider_6.valueChanged.connect(MainWindow.fungradient)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        self.verticalLayout_11.addWidget(self.horizontalSlider_6)

        self.horizontalSlider_7 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_7.setValue(100)
        self.horizontalSlider_7.setMinimum(0)
        self.horizontalSlider_7.setMaximum(255)
        self.horizontalSlider_7.setSingleStep(1)
        self.horizontalSlider_7.valueChanged.connect(MainWindow.fungradient)
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.verticalLayout_11.addWidget(self.horizontalSlider_7)


        self.horizontalLayout_3.addLayout(self.verticalLayout_11)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")



        self.lcdNumber = QtWidgets.QDoubleSpinBox(self.centralwidget)##################################################################################
        
        self.lcdNumber.setRange(0,1)#设置范围
        self.lcdNumber.setSingleStep(0.1)
        self.lcdNumber.setValue(1)
        self.lcdNumber.valueChanged.connect(self.fungradient)


        self.lcdNumber.setObjectName("lcdNumber")
        self.verticalLayout_12.addWidget(self.lcdNumber)

        self.lcdNumber_2 = QtWidgets.QDoubleSpinBox(self.centralwidget)

        self.lcdNumber_2.setRange(0,1)#设置范围
        self.lcdNumber_2.setSingleStep(0.1)
        self.lcdNumber_2.setValue(1)
        self.lcdNumber_2.valueChanged.connect(self.fungradient)

        
        self.lcdNumber_2.setObjectName("lcdNumber_2")
        self.verticalLayout_12.addWidget(self.lcdNumber_2)

        self.lcdNumber_3 = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.lcdNumber_3.setSingleStep(0.1)
        self.lcdNumber_3.setValue(1)
        self.lcdNumber_3.valueChanged.connect(self.fungradient)


        self.lcdNumber_3.setObjectName("lcdNumber_3")
        self.verticalLayout_12.addWidget(self.lcdNumber_3)

        self.horizontalLayout_3.addLayout(self.verticalLayout_12)
        self.verticalLayout_13.addLayout(self.horizontalLayout_3)
        self.verticalLayout_14.addLayout(self.verticalLayout_13)
        self.horizontalLayout_4.addLayout(self.verticalLayout_14)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.qvtkWidget = QVTKWidget(self.centralwidget)
        self.qvtkWidget.setMinimumSize(QtCore.QSize(600, 400))
        self.qvtkWidget.setObjectName("qvtkWidget")
        self.renderer = vtk.vtkRenderer()
        self.renderer.SetBackground(0.0, .0, .0)
        #self.renderer.SetViewport(0.5,0,1.0,1.0)#
        self.render_window = self.qvtkWidget.GetRenderWindow()#     
        self.render_window.AddRenderer(self.renderer)
        self.iren = self.render_window.GetInteractor()  
         
        self.axesActor = vtk.vtkAnnotatedCubeActor()#
        self.axesActor.SetXPlusFaceText('X+')
        self.axesActor.SetXMinusFaceText('X-')
        self.axesActor.SetYMinusFaceText('y-')
        self.axesActor.SetYPlusFaceText('y+')
        self.axesActor.SetZMinusFaceText('z-')
        self.axesActor.SetZPlusFaceText('z+')
        self.axesActor.GetTextEdgesProperty().SetColor(1,1,0)
        self.axesActor.GetTextEdgesProperty().SetLineWidth(1)
        self.axesActor.GetCubeProperty().SetColor(0,0,1)
                
                
        self.axes = vtk.vtkOrientationMarkerWidget()#
        self.axes.SetOrientationMarker(self.axesActor)               
        self.axes.SetInteractor(self.iren)               
        self.axes.EnabledOn()       
        self.iren.Initialize()
        self.iren.Start()
        self.verticalLayout.addWidget(self.qvtkWidget)
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)#########################################
        #self.horizontalSlider.valueChanged.connect(self.mianhuizhiyichu)
        self.horizontalSlider.setValue(100)
        self.horizontalSlider.setMinimum(0)
        self.horizontalSlider.setSingleStep(1)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)

        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout.addWidget(self.horizontalSlider)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        ###################################################################################
       
        self.fig2 = plt.Figure()
        self.canvas2 = FC(self.fig2)
        #########################
        self.verticalLayout_2.addWidget(self.canvas2)

       
        self.horizontalSlider_2 = QtWidgets.QSlider(self.centralwidget)
                                            ####################################切片调节#######################################
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.valueChanged.connect(self.weizhi)
        self.horizontalSlider_2.setMinimum(0)

       
        self.horizontalSlider_2.setSingleStep(1)




        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.verticalLayout_2.addWidget(self.horizontalSlider_2)
        self.gridLayout.addLayout(self.verticalLayout_2, 0, 1, 1, 1)
        
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
#######################################################
        self.fig3 = plt.Figure()
        self.canvas3 = FC(self.fig3)
        self.verticalLayout_3.addWidget(self.canvas3)  
        #########################
        
        self.horizontalSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_3.setMinimum(0)
        self.horizontalSlider_3.setSingleStep(1)
        self.horizontalSlider_3.valueChanged.connect(self.weizhi2)#################################切片调节####################################
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.verticalLayout_3.addWidget(self.horizontalSlider_3)
        self.gridLayout.addLayout(self.verticalLayout_3, 1, 0, 1, 1)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSpacing(6)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        ###############################################
        self.fig4 = plt.Figure()
        self.canvas4 = FC(self.fig4)
        
        self.verticalLayout_4.addWidget(self.canvas4)

        self.horizontalSlider_4 = QtWidgets.QSlider(self.centralwidget)#############################切片调节#########################################
        self.horizontalSlider_4.setMinimum(0)
        
        self.horizontalSlider_4.setSingleStep(1)
        self.horizontalSlider_4.valueChanged.connect(self.weizhi3)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.verticalLayout_4.addWidget(self.horizontalSlider_4)
        self.gridLayout.addLayout(self.verticalLayout_4, 1, 1, 1, 1)
        ###########################################################################
        self.horizontalLayout_4.addLayout(self.gridLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1951, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setObjectName("menu_4")
        self.menu_5 = QtWidgets.QMenu(self.menubar)
        self.menu_5.setObjectName("menu_5")
        self.menu_6 = QtWidgets.QMenu(self.menubar)
        self.menu_6.setObjectName("menu_6")
        self.menu_7 = QtWidgets.QMenu(self.menubar)
        self.menu_7.setObjectName("menu_7")


        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actiondaikai = QtWidgets.QAction(MainWindow)
        self.actiondaikai.setObjectName("actiondaikai")
        self.actiondaikai.triggered.connect(MainWindow.openfile)
        
        self.actiondaika = QtWidgets.QAction(MainWindow)
        self.actiondaika.setObjectName("actiondaika")
        self.actiondaika.triggered.connect(MainWindow.openfile2)

        self.actionqiege = QtWidgets.QAction(MainWindow)
        self.actionqiege.setObjectName("actionqiege")
        self.actionqiege.triggered.connect(MainWindow.qiege)
       
        self.actionqiepian = QtWidgets.QAction(MainWindow)
        self.actionqiepian.setObjectName("actionqiepian")
        self.actionqiepian.triggered.connect(MainWindow.qiepiantiaozheng)
        #self.actionqiepian.triggered.connect(MainWindow.qiepian2)
      #  self.actionqiepian.triggered.connect(MainWindow.qiepian3)

        self.actionchangdu = QtWidgets.QAction(MainWindow)
        self.actionchangdu.setObjectName("actionchangdu")
        self.actionchangdu.triggered.connect(MainWindow.changdu) 


        self.actionjiaodu = QtWidgets.QAction(MainWindow)
        self.actionjiaodu.setObjectName("actionjiao")
        self.actionjiaodu.triggered.connect(MainWindow.jiaodu) 

        




        self.actiona = QtWidgets.QAction(MainWindow)
        self.actiona.setObjectName("actiona")
        self.actiona.triggered.connect(self.quchu)

        self.actionb = QtWidgets.QAction(MainWindow)
        self.actionb.setObjectName("actionb")
        self.actionb.triggered.connect(MainWindow.mianhuizhixianshi) 
        

        self.actionc = QtWidgets.QAction(MainWindow)
        self.actionc.setObjectName("actionc")
        self.actionc.triggered.connect(MainWindow.miamhuizhiqiege)


      

        self.actionf = QtWidgets.QAction(MainWindow)
        self.actionf.setObjectName("actionf")
        self.actionf.triggered.connect(MainWindow.miamhuizhiqiege)



        self.actionbaocun = QtWidgets.QAction(MainWindow)
        self.actionbaocun.setObjectName("actionbaocun")
        self.actionbaocun.triggered.connect(MainWindow.openfile3) 

        self.actionwenbanbaocun = QtWidgets.QAction(MainWindow)
        self.actionwenbanbaocun.setObjectName("表格")
        self.actionwenbanbaocun.triggered.connect(MainWindow.jiaozheng) 

        self.menu.addAction(self.actiondaikai)
        self.menu.addAction(self.actiondaika)

        self.menu.addAction(self.actionbaocun)
        self.menu.addAction(self.actionwenbanbaocun)
        self.menu_2.addAction(self.actionqiege)
        self.menu_2.addAction(self.actionqiepian)

        self.menu_3.addAction(self.actionchangdu)
        self.menu_3.addAction(self.actionjiaodu)
        self.menu_3.addAction(self.actionb)



        self.menu_4.addAction(self.actiona)
        self.menu_4.addAction(self.actionc)
        self.menu_4.addAction(self.actionf)

        self.actionseedthreshold= QtWidgets.QAction(MainWindow)
        self.actionseedthreshold.setObjectName("actionjiao")
        self.actionseedthreshold.triggered.connect(MainWindow.seedthresholduse) 

        self.actionthreshold= QtWidgets.QAction(MainWindow)
        self.actionthreshold.setObjectName("actionjiao")
        self.actionthreshold.triggered.connect(MainWindow.thresholduse) 

       
        self.actionconfidence= QtWidgets.QAction(MainWindow)
        self.actionconfidence.setObjectName("actionjiao")
        self.actionconfidence.triggered.connect(MainWindow.confidenceuse) 
        self.menu_5.addAction(self.actionseedthreshold)
        self.menu_5.addAction(self.actionthreshold)
        self.menu_5.addAction(self.actionconfidence)

        self.actionseedthreshold2= QtWidgets.QAction(MainWindow)
        self.actionseedthreshold2.setObjectName("actionjiao")
        self.actionseedthreshold2.triggered.connect(MainWindow.seedthresholduse2) 
        
        self.actionthreshold2= QtWidgets.QAction(MainWindow)
        self.actionthreshold2.setObjectName("actionjiao")
        self.actionthreshold2.triggered.connect(MainWindow.thresholduse2) 

       
        self.actionconfidence2= QtWidgets.QAction(MainWindow)
        self.actionconfidence2.setObjectName("actionjiao")
        self.actionconfidence2.triggered.connect(MainWindow.confidenceuse2) 
        self.menu_6.addAction(self.actionseedthreshold2)
        self.menu_6.addAction(self.actionthreshold2)
        self.menu_6.addAction(self.actionconfidence2)


        self.actionseedthreshold3= QtWidgets.QAction(MainWindow)
        self.actionseedthreshold3.setObjectName("actionjiao")
        self.actionseedthreshold3.triggered.connect(MainWindow.seedthresholduse3) 

        self.actionthreshold3= QtWidgets.QAction(MainWindow)
        self.actionthreshold3.setObjectName("actionjiao")
        self.actionthreshold3.triggered.connect(MainWindow.thresholduse3) 

       
        self.actionconfidence3= QtWidgets.QAction(MainWindow)
        self.actionconfidence3.setObjectName("actionjiao")
        self.actionconfidence3.triggered.connect(MainWindow.confidenceuse3) 
        self.menu_7.addAction(self.actionseedthreshold3)
        self.menu_7.addAction(self.actionthreshold3)
        self.menu_7.addAction(self.actionconfidence3)

        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_5.menuAction())
        self.menubar.addAction(self.menu_6.menuAction())
        self.menubar.addAction(self.menu_7.menuAction())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    

        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "颜色"))
        self.pushButton_2.setText(_translate("MainWindow", "颜色"))
        self.pushButton_3.setText(_translate("MainWindow", "颜色"))
        self.pushButton_4.setText(_translate("MainWindow", "颜色"))
        self.pushButton_5.setText(_translate("MainWindow", "颜色"))
        self.pushButton_6.setText(_translate("MainWindow", "颜色"))
        self.label_2.setText(_translate("MainWindow", "颜色选取"))
        self.label.setText(_translate("MainWindow", "标量梯度调节"))
        self.label_4.setText(_translate("MainWindow", "文字展示区"))
        self.label_3.setText(_translate("MainWindow", "光照参数与梯度参数"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "体绘制"))
        self.menu_3.setTitle(_translate("MainWindow", "测量"))
        self.menu_4.setTitle(_translate("MainWindow", "待定"))
        self.menu_5.setTitle(_translate("MainWindow", "矢状面"))
        self.menu_6.setTitle(_translate("MainWindow", "水平面"))
        self.menu_7.setTitle(_translate("MainWindow", "冠状面"))



        self.actiondaikai.setText(_translate("MainWindow", "dicom打开"))
        self.actiondaika.setText(_translate("MainWindow", "mhd打开"))

        self.actionqiege.setText(_translate("MainWindow", "切割"))
        self.actionqiepian.setText(_translate("MainWindow", "切片"))

        self.actionchangdu.setText(_translate("MainWindow", "长度"))
    



        self.actionjiaodu.setText(_translate("MainWindow", "角度"))
       


        self.actiona.setText(_translate("MainWindow", "函数举例"))
        self.actionb.setText(_translate("MainWindow", "体积与表面积"))
        self.actionc.setText(_translate("MainWindow", "面绘制切割"))
        
       
    
        self.actionf.setText(_translate("MainWindow", "阈值传输函数"))
        self.actionseedthreshold.setText(_translate("MainWindow", "种子阈值分割"))
        self.actionthreshold.setText(_translate("MainWindow", "阈值分割"))
        self.actionconfidence.setText(_translate("MainWindow", "置信分割"))

        self.actionseedthreshold2.setText(_translate("MainWindow", "种子阈值分割"))
        self.actionthreshold2.setText(_translate("MainWindow", "阈值分割"))
        self.actionconfidence2.setText(_translate("MainWindow", "置信分割"))
       
        self.actionseedthreshold3.setText(_translate("MainWindow", "种子阈值分割"))
        self.actionthreshold3.setText(_translate("MainWindow", "阈值分割"))
        self.actionconfidence3.setText(_translate("MainWindow", "置信分割"))
        
        self.actionbaocun.setText(_translate("MainWindow", "niiwenjian"))
        self.actionwenbanbaocun.setText(_translate("MainWindow", "传输函数"))
    def qiepiantiaozheng(self):
       
        self.signal.connect(self.xianshi)
        self.signal.emit()
        self.signal2.connect(self.xianshi2)
        self.signal2.emit()
        self.signal3.connect(self.xianshi3)
        self.signal3.emit()
        """
        self.signal.connect(self.weizhi)
        self.signal.emit()
        self.signal2.connect(self.weizhi2)
        self.signal2.emit()
        self.signal3.connect(self.weizhi3)
        self.signal3.emit()
        """
    def color(self):
            
            self.funcColor = vtk.vtkColorTransferFunction()
            self.funcColor.AddRGBPoint(self.horizontalSlider_12.value(), self.color1[0]/255 , self.color1[1]/255 ,self.color1[2]/255 )#特征更加突出
            self.funcColor.AddRGBPoint(self.horizontalSlider_13.value(), self.color2[0]/255 , self.color2[1]/255 ,self.color2[2]/255 )
            self.funcColor.AddRGBPoint(self.horizontalSlider_14.value(), self.color3[0]/255 , self.color3[1]/255 ,self.color3[2]/255 )
            self.funcColor.AddRGBPoint(self.horizontalSlider_15.value(),self.color4[0]/255 , self.color4[1]/255,self.color4[2]/255 )
            self.funcColor.AddRGBPoint(self.horizontalSlider_16.value(),self.color5[0]/255 , self.color5[1]/255 ,self.color5[2]/255 )
            self.funcColor.AddRGBPoint(self.horizontalSlider_17.value(),self.color6[0]/255 , self.color6[1]/255 ,self.color6[2]/255 )
            self.funcColor.Build()
          
            self.funcColor2 = vtk.vtkColorTransferFunction()
            self.funcColor2.AddRGBPoint(self.guodu//6, self.color1[0]/255 , self.color1[1]/255 ,self.color1[2]/255 )
            self.funcColor2.AddRGBPoint(self.guodu//6*2, self.color2[0]/255 , self.color2[1]/255 ,self.color2[2]/255 )
            self.funcColor2.AddRGBPoint(self.guodu//6*3, self.color3[0]/255 , self.color3[1]/255 ,self.color3[2]/255 )
            self.funcColor2.AddRGBPoint(self.guodu//6*4,self.color4[0]/255 , self.color4[1]/255,self.color4[2]/255 )
            self.funcColor2.AddRGBPoint(self.guodu//6*5,self.color5[0]/255 , self.color5[1]/255 ,self.color5[2]/255 )
            self.funcColor2.AddRGBPoint(self.guodu,self.color6[0]/255 , self.color6[1]/255 ,self.color6[2]/255 )
            self.funcColor2.Build()
            self.propVolume.SetColor(self.funcColor2)#颜色
            self.functionsItem.SetColorTransferFunction(self.funcColor2)#biaoge
            self.pointsItem.SetColorTransferFunction(self.funcColor2)#添加颜色                         
    def tidu1(self):      
        self.tidu2= vtk.vtkPiecewiseFunction()#不透明度  
        self.tidu2.AddPoint(self.horizontalSlider_12.value(), self.lcdNumber_7.value())
        self.tidu2.AddPoint(self.horizontalSlider_13.value(), self.lcdNumber_8.value())
        self.tidu2.AddPoint(self.horizontalSlider_14.value(),self.lcdNumber_9.value())  
        self.tidu2.AddPoint(self.horizontalSlider_15.value(), self.lcdNumber_10.value())  
        self.tidu2.AddPoint(self.horizontalSlider_16.value(), self.lcdNumber_11.value())  
        self.tidu2.AddPoint(self.horizontalSlider_17.value(), self.lcdNumber_12.value())  
     
        self.propVolume.SetScalarOpacity(self.tidu2)#标量不透明度
        self.functionsItem.SetOpacityFunction(self.tidu2)#尺度不同，需要调整
        #self.pointsItem.SetPointsFunction(vtkCompositeControlPointsItem.ColorPointsFunction)#
        self.pointsItem.SetOpacityFunction(self.tidu2)#添加梯度
        self.functionsItem.SetMaskAboveCurve(True)
    def fungradient(self):
        funcOpacityGradient = vtk.vtkPiecewiseFunction()
        funcOpacityGradient.AddPoint(self.horizontalSlider_5.value(),self.lcdNumber.value())
        funcOpacityGradient.AddPoint(self.horizontalSlider_6.value(),self.lcdNumber_2.value())
        funcOpacityGradient.AddPoint(self.horizontalSlider_7.value(),self.lcdNumber_3.value()) 
        self.propVolume.SetGradientOpacity(funcOpacityGradient)#梯度不透明度,过度区域显示效果
    def guangzhao(self):
        self.propVolume.ShadeOn()  
        self.propVolume.SetAmbient(self.doubleSpinBox_2.value())
        self.propVolume.SetDiffuse(self.doubleSpinBox_3.value())
        self.propVolume.SetSpecular(self.doubleSpinBox.value())
    def openfile(self):
                                              
             self.filename = QtWidgets.QFileDialog.getExistingDirectory(self,"选取文件夹","./") 
             if  self.filename:#起始路径 
                      
                self.reader1 = vtk.vtkDICOMImageReader( )
                self.reader1.SetDirectoryName(self.filename)#文件路径           
                self.reader1.Update()
                a=self.reader1.GetWidth()
                b=self.reader1.GetHeight()#
                c=self.reader1.GetOutput().GetExtent()
                self.label_4.setText(" 长度= "+str(c[1]))   #组件数量
                self.label_5.setText(" 宽度= "+str(c[3]))
                self.label_6.setText(" 切片数= "+str(c[5]))
                self.horizontalSlider_2.setMaximum(c[1])
                self.horizontalSlider_3.setMaximum(c[3])
                self.horizontalSlider_4.setMaximum(c[5])
              
                #print(self.reader1.GetAnatomicalOrientation())#解剖学定位
                #print(self.reader1.GetPixelSpacing())#
                # print(self.reader1.GetPatientName())#获取最后处理的图像的患者姓名
                #print(self.reader1.GetGantryAngle())#架子角度        
                #funcRayCast = vtk.vtkVolumeRayCastCompositeFunction()
                #funcRayCast.SetCompositeMethodToClassifyFirst()
                reader = sitk.ImageSeriesReader()
                dicom = reader.GetGDCMSeriesFileNames(self.filename)
                reader.SetFileNames(dicom)
                img = reader.Execute()#

                self.scan=sitk.GetArrayFromImage(img)
                max=np.max(self.scan)
                min=np.min(self.scan)
                self.guodu=(max-min)//2
                

                fen=self.guodu//6
             
                self.horizontalSlider_12.setMaximum(self.guodu)
                self.horizontalSlider_13.setMaximum(self.guodu)
                self.horizontalSlider_14.setMaximum(self.guodu)
                self.horizontalSlider_15.setMaximum(self.guodu)
                self.horizontalSlider_16.setMaximum(self.guodu)
                self.horizontalSlider_17.setMaximum(self.guodu) 
                self.horizontalSlider_12.setValue(fen)
                self.horizontalSlider_13.setValue(fen*2)
                self.horizontalSlider_14.setValue(fen*3)
                self.horizontalSlider_15.setValue(fen*4)
                self.horizontalSlider_16.setValue(fen*5)
                self.horizontalSlider_17.setValue(fen*6)

                self.propVolume.SetInterpolationTypeToLinear()#              
                self.mapperVolume = vtk.vtkGPUVolumeRayCastMapper()             
                self.mapperVolume.SetInputConnection(self.reader1.GetOutputPort())
                #self.mapperVolume.SetVolumeRayCastFunction(funcRayCast)
                self.mapperVolume.SetCroppingRegionFlagsToInvertedFence()
                self.mapperVolume.SetCropping(1)#步数，研究绘制的精细程度
                self.mapperVolume.CroppingOff()
                self.actorVolume = vtk.vtkVolume()
                self.actorVolume.SetMapper(self.mapperVolume)
                self.actorVolume.SetProperty(self.propVolume)
                
                ##########################################                                                
                self.renderer.AddViewProp(self.actorVolume)#                      
                self.renderer.ResetCamera() 
    
    def openfile2(self):
            #filename, imgType = QtWidgets.QFileDialog.getOpenFileName(None, "打开图片", "", "*.jpg;;*.mhd;;All Files(*)")
                       
            # 暂时先将路径设置为当前路径，有时间再修改成最近一次使用的路径
                #加,_什么意思,

                   
                self.filename,of = QtWidgets.QFileDialog.getOpenFileName(self,"文件打开","./","All Files (*);;mhd Files (*.mhd)")
                self.reader1=vtk.vtkMetaImageReader()
                self.reader1.SetFileName(self.filename)
                self.a=sitk.ReadImage(self.filename)
                #a=sitk.GetArrayFromImage(a)
                size = self.a.GetSize()
                print( "Image size:", size[0], size[1], size[2] )                             
                self.reader1.Update()
                #文件路径                       
                a=self.reader1.GetPixelSpacing()
                b=self.reader1.GetOutput().GetExtent()#方向数据的最大最小值 
                self.horizontalSlider_2.setMaximum(size[0])
                print(size[0])

                self.horizontalSlider_3.setMaximum(b[3])
                self.horizontalSlider_4.setMaximum(b[5])

                self.label_4.setText(" 长度= "+str(b[1]+1))   #组件数量
                self.label_5.setText(" 宽度= "+str(b[3]+1))
                self.label_6.setText(" 切片数= "+str(b[5]+1))
                img = sitk.ReadImage(self.filename)#
                self.scan=sitk.GetArrayFromImage(img)
                max=np.max(self.scan)
                min=np.min(self.scan)
                self.guodu=(max-min)
                fen=self.guodu//6
                self.horizontalSlider_12.setMaximum(self.guodu)
                self.horizontalSlider_13.setMaximum(self.guodu)
                self.horizontalSlider_14.setMaximum(self.guodu)
                self.horizontalSlider_15.setMaximum(self.guodu)
                self.horizontalSlider_16.setMaximum(self.guodu)
                self.horizontalSlider_17.setMaximum(self.guodu)
               
                self.horizontalSlider_12.setValue(fen)
                self.horizontalSlider_13.setValue(fen*2)
                self.horizontalSlider_14.setValue(fen*3)
                self.horizontalSlider_15.setValue(fen*4)
                self.horizontalSlider_16.setValue(fen*5)
                self.horizontalSlider_17.setValue(fen*6)
               
               
                self.propVolume.SetInterpolationTypeToLinear()#
                self.mapperVolume = vtk.vtkGPUVolumeRayCastMapper()             
                self.mapperVolume.SetInputConnection(self.reader1.GetOutputPort())
                #self.mapperVolume.SetVolumeRayCastFunction(funcRayCast)
                self.mapperVolume.SetCroppingRegionFlagsToInvertedFence()
                self.mapperVolume.SetCropping(1)#步数，研究绘制的精细程度
                self.mapperVolume.CroppingOff()


                self.actorVolume = vtk.vtkVolume()
                self.actorVolume.SetMapper(self.mapperVolume)
                self.actorVolume.SetProperty(self.propVolume)
                
                ##########################################                                                
                self.renderer.AddViewProp(self.actorVolume)#                      
                self.renderer.ResetCamera() 
    def openfile3(self):
                                              
             self.filename,of = QtWidgets.QFileDialog.getOpenFileName(self,"文件打开","./","All Files (*);;gz Files (*.gz)")
             if  self.filename:#起始路径 
                      
                self.reader1 = vtk.vtkNIFTIImageReader()
                #self.reader2.SetDirectoryName(self.filename)#文件路径 
                self.reader1.SetFileName(self.filename)          
                self.reader1.Update()
                #a=self.reader2.GetWidth()
               # b=self.reader2.GetHeight()#
                #c=self.reader2.GetOutput().GetExtent()
                #self.label_4.setText(" 长度= "+str(c[1]))   #组件数量
                #self.label_5.setText(" 宽度= "+str(c[3]))
               # self.label_6.setText(" 切片数= "+str(c[5]))
               # self.horizontalSlider_2.setMaximum(c[1])
               # self.horizontalSlider_3.setMaximum(c[3])
               # self.horizontalSlider_4.setMaximum(c[5])
              
                #print(self.reader1.GetAnatomicalOrientation())#解剖学定位
                #print(self.reader1.GetPixelSpacing())#
                # print(self.reader1.GetPatientName())#获取最后处理的图像的患者姓名
                #print(self.reader1.GetGantryAngle())#架子角度        
                #funcRayCast = vtk.vtkVolumeRayCastCompositeFunction()
                #funcRayCast.SetCompositeMethodToClassifyFirst()
                
                img = sitk.ReadImage(self.filename)

                self.scan=sitk.GetArrayFromImage(img)
                max=np.max(self.scan)
                min=np.min(self.scan)
                self.guodu=(max-min)//2
                

                fen=self.guodu//6
             
                self.horizontalSlider_12.setMaximum(self.guodu)
                self.horizontalSlider_13.setMaximum(self.guodu)
                self.horizontalSlider_14.setMaximum(self.guodu)
                self.horizontalSlider_15.setMaximum(self.guodu)
                self.horizontalSlider_16.setMaximum(self.guodu)
                self.horizontalSlider_17.setMaximum(self.guodu) 
                self.horizontalSlider_12.setValue(fen)
                self.horizontalSlider_13.setValue(fen*2)
                self.horizontalSlider_14.setValue(fen*3)
                self.horizontalSlider_15.setValue(fen*4)
                self.horizontalSlider_16.setValue(fen*5)
                self.horizontalSlider_17.setValue(fen*6)

                self.propVolume.SetInterpolationTypeToLinear()#              
                self.mapperVolume = vtk.vtkGPUVolumeRayCastMapper()             
                self.mapperVolume.SetInputConnection(self.reader1.GetOutputPort())
                #self.mapperVolume.SetVolumeRayCastFunction(funcRayCast)
                self.mapperVolume.SetCroppingRegionFlagsToInvertedFence()
                self.mapperVolume.SetCropping(1)#步数，研究绘制的精细程度
                self.mapperVolume.CroppingOff()
                self.actorVolume = vtk.vtkVolume()
                self.actorVolume.SetMapper(self.mapperVolume)
                self.actorVolume.SetProperty(self.propVolume)
                print("一运行")
                ##########################################                                                
                self.renderer.AddViewProp(self.actorVolume)#                      
                self.renderer.ResetCamera() 


    def mianhuizhixianshi(self):
        self.signal4.connect(self.mianhuizhi)
        self.signal4.emit(self.horizontalSlider_12.value())
        self.label_4.setText("不透明度值 = "+str(self.horizontalSlider_12.value()))#
   
    def mianhuizhi(self,a):
        self.skinExtractor = vtk.vtkContourFilter()#面绘制,轮廓过滤器
        self.skinExtractor.SetInputConnection(self.reader1.GetOutputPort())
        self.skinExtractor.SetValue(0,a)#画一条等值为1的等值线，（i,value）i表示第几条等值线
        #self.skinExtractor.GenerateValues(3,100,300)
        self.skinExtractor.ComputeGradientsOn()
        self.skinExtractor.ComputeScalarsOn()

        smooth = vtk.vtkSmoothPolyDataFilter()#网格平滑
        smooth.SetInputConnection(self.skinExtractor.GetOutputPort())
        smooth.SetNumberOfIterations(10)

        skinNormals = vtk.vtkPolyDataNormals()#计算法向量
        skinNormals.SetInputConnection(smooth.GetOutputPort())
        skinNormals.SetFeatureAngle(10)


        triFilter = vtk.vtkTriangleFilter()#以实现多边形网格数据向三角形网格数据的转换
        triFilter.SetInputConnection(smooth.GetOutputPort())
        triFilter.Update()

        massProp = vtk.vtkMassProperties()
        massProp.SetInputData(triFilter.GetOutput())
        vol = massProp.GetVolume()
        area= massProp.GetSurfaceArea()
        self.label_5.setText("等值面体积 = "+str(vol)+"立方毫米")#
        self.label_6.setText("等值面面积 = "+str(area)+"平方毫米")#
       
    def miamhuizhiqiege(self):
    #定义平面隐函数
        self.pWidget = vtk.vtkImplicitPlaneWidget()
        self.pWidget.SetInputData(self.skinStripper.GetOutput())#同时运行了同一段代码，产生卡顿
        self.pWidget.SetPlaceFactor(1.25)#框的大小 
        self.pWidget.PlaceWidget()
        self.pWidget.SetInteractor(self.iren2)
        self.pWidget.On()                
        self.pWidget.AddObserver("EndInteractionEvent", self.my_call_back)  #????????????????????加个self就行？？？？              
         #????????????????????加个self就行？？？？      
        self.planeNew2 = vtk.vtkPlane()
        self.planeNew2.SetOrigin(self.reader1.GetOutput().GetCenter())
        self.planeNew2.SetNormal(1, 0, 0)        
    #CallBack函数
    def my_call_back(self,pWidget,ev):
    #表示当pWidget控件改变时，触发函数
        if (pWidget):
            print("1212")
            cliper = vtk.vtkClipPolyData()
            cliper.SetInputData(self.skinStripper.GetOutput())
            cliper.SetClipFunction(self.planeNew2)
            cliper.GenerateClippedOutputOn()
            cliper.Update()
            clipedData = vtk.vtkPolyData()
            clipedData.DeepCopy(cliper.GetOutput())
            #####################################################################

            triFilter = vtk.vtkTriangleFilter()#以实现多边形网格数据向三角形网格数据的转换
            triFilter.SetInputData(cliper.GetOutput())
            triFilter.Update()
            massProp = vtk.vtkMassProperties()
            massProp.SetInputData(triFilter.GetOutput())
            self.vol = massProp.GetVolume()
            self.area= massProp.GetSurfaceArea()
              ########################################################## 
            coneMapper = vtk.vtkPolyDataMapper()
            coneMapper.SetInputData(clipedData)
            coneMapper.ScalarVisibilityOff()
            ###########################
           
        
            ####################################
            self.coneSkinActor = vtk.vtkActor()
            self.coneSkinActor.SetMapper(coneMapper)
        
            self.renderer3.AddActor(self.coneSkinActor)
            self.renderer3.ResetCamera()            
        #获得pWidget中的平面，将平面值赋值planeNew
            pWidget.GetPlane(self.planeNew2)
            self.label_5.setText("切割后等值面体积 = "+str(self.vol))#
            self.label_6.setText("切割后等值面面积 = "+str(self.area))
            
            return self.my_call_back                
    def jiaozheng(self):
        self.functionsItem.SetMaskAboveCurve(True)
        self.pointsItem.SetPointsFunction(self.pointsItem.ColorPointsFunction)
        self.chart = vtk.vtkChartXY()
        self.chart.AddPlot(self.functionsItem)
        self.chart.AddPlot(self.pointsItem)
        self.chart.SetTopBorder(100)
        self.chart.RecalculateBounds()#重新设置图表
        
        self.view = vtk.vtkContextView()
        
        self.view.GetScene().AddItem(self.chart)
        self.view.SetRenderWindow(self.render_window5 )
        self.view.SetInteractor(self.iren5) 
        
    def changdu(self):         
        self.handle = vtk.vtkPointHandleRepresentation3D()#长度表现形式
        self.handle.GetProperty().SetColor(0,0,0)
      #  self.handle.XShadowsOn()
        #self.handle.YShadowsOn()
       # self.handle.ZShadowsOn()
        self.handle.TranslationModeOn()


        self.rep=vtk.vtkDistanceRepresentation2D()
        self.rep.SetHandleRepresentation(self.handle)
        

        self.rep.GetAxis().SetNumberOfMinorTicks(4)
        self.rep.GetAxis().SetTickLength(9)#
        self.rep.GetAxis().SetTitlePosition(0.5)
        self.rep.GetAxis().GetLabelFormat ()
        
       #
      #  print(self.rep.GetPoint2WorldPosition ())
      #  print(self.rep.GetDistance () )
        #self.rep.RulerModeOn()#打开后没有刻度了

        self.changdu=vtk.vtkDistanceWidget()
        self.changdu.SetInteractor(self.iren)
        self.changdu.SetRepresentation(self.rep)
        self.changdu.CreateDefaultRepresentation()
        
        self.changdu.AddObserver("EndInteractionEvent", self.changducall)
        self.changdu.On()
    def changducall(self,changdu,ev):
         a=[0.0,0.0,0.0]
         b=[0.0,0.0,0.0]
         self.rep.GetPoint1DisplayPosition (a)
         self.rep.GetPoint2DisplayPosition (b)
         self.label_4.setText("两点距离 = "+str(self.rep.GetDistance ())+"mm")#获得距离
         self.label_5.setText("a点位置 = "+str(a))#获得距离
         self.label_6.setText("b点位置 = "+str(b))#获得距离

    def jiaodu(self):
        self.handle =vtk.vtkPointHandleRepresentation3D()#长度表现
        self.handle.GetProperty().SetColor(1, 0, 0)  
      #  self.handle.Get
        #self.handle.

        self.rep=vtk.vtkAngleRepresentation3D()		
        self.rep.SetHandleRepresentation(self.handle)
        #self.rep.GetProperty().SetColor(0, 1, 1)
        self.angle=vtk.vtkAngleWidget()                        
        self.angle.SetRepresentation(self.rep)   
        self.angle.SetInteractor(self.iren)
        self.angle.CreateDefaultRepresentation()

        self.angle.On()   
     
              
    def qiege(self,qiege):  #切割后的模型传递到林外一个窗口，而不是在另外一个窗口进行裁剪
        if self.b==1:
            
            self.planeWidgetY.Off()
            self.planeWidgetx.Off()
            self.planeWidgetz.Off()
            self.view.RemoveAllRepresentation()    
        self.pWidget = vtk.vtkImplicitPlaneWidget()
        self.pWidget.SetInputData(self.reader1.GetOutput())#同时运行了同一段代码，产生卡顿
        self.pWidget.SetPlaceFactor(1.25)#框的大小 
        self.pWidget.PlaceWidget()
        self.pWidget.SetInteractor(self.iren)
        self.pWidget.On()                
        self.pWidget.AddObserver("EndInteractionEvent", self.call)  #????????????????????加个self就行？？？？ 
        self.planeNew = vtk.vtkPlane()
        self.planeNew.SetOrigin(self.reader1.GetOutput().GetCenter())
        self.planeNew.SetNormal(1, 0, 0)
        mapperVolume1 = vtk.vtkGPUVolumeRayCastMapper()                
        mapperVolume1.SetInputConnection(self.reader1.GetOutputPort())
        mapperVolume1.AddClippingPlane(self.planeNew)
        #mapperVolume.SetVolumeRayCastFunction(funcRayCast)
        mapperVolume1.SetCroppingRegionFlagsToInvertedFence()
        mapperVolume1.SetCropping(1)
        mapperVolume1.CroppingOff()
        print(mapperVolume1.GetVoxelCroppingRegionPlanes())
        mapperVolume1.Update()

        self.label_4.setText("原点位置 = "+str(self.planeNew.GetOrigin()))
        self.label_5.setText("法向量 = "+str(self.planeNew.GetNormal()))                     
      
        self.croppingVolume =vtk.vtkVolume()
        self.croppingVolume.SetMapper(mapperVolume1)
        self.croppingVolume.SetProperty(self.propVolume)#

        self.renderer5.AddViewProp(self.croppingVolume)
        self.renderer5.ResetCamera()  
        self.a=1                                                                             
    def call(self,pWidget,ev):#不会的看官网
        #表示当pWidget控件改变时，触发函数
        if (pWidget and self.a==1):                   
            pWidget.GetPlane(self.planeNew)                                                      
            return self.call 
    def quchu(self):
         self.renderer4.RemoveActor(self.croppingVolume)             
    #######################################################################################################################
    def weizhi(self):
        freq = int(self.horizontalSlider_2.value())#滑动块的值
        self.itkimage=self.scan[freq,:,:,]
        self.canvas2.draw_idle()#重新绘制整个图表canvas画布 
        ax = self.fig2.add_subplot(111) 
        ax.imshow(self.itkimage)   
        #self.label_4.setText(" 矢状面切片位置= "+str(self.horizontalSlider_2.value()))   #组件数量
    
        self.planeWidgetY.SetSliceIndex(self.horizontalSlider_2.value())#沿法线切片位置

        self.label_4.setText("矢状面切片位置 = "+str(self.horizontalSlider_2.value())) 
        self.planeWidgetY.UpdatePlacement()#更新位置
    def xianshi(self):

            self.lcdNumber.setValue(0.)
            self.lcdNumber_2.setValue(0.)
            self.lcdNumber_3.setValue(0.1)
           
            self.b=1
            self.planeWidgetY = vtk.vtkImagePlaneWidget()                                          
            #self.planeWidgetY.SetSliceIndex(50)#根据数据范围设置切片位置。
            self.planeWidgetY.SetInteractor(self.iren)
           
            #self.planeWidgetY.SetKeyPressActivationValue('y')
                         
            self.planeWidgetY.GetPlaneProperty().SetColor(1,0,1)#
            #self.planeWidgetY.SetTexturePlaneProperty(ipwProp)
            self.planeWidgetY.TextureInterpolateOn()#纹理可见
            self.planeWidgetY.SetResliceInterpolateToLinear()#设置插值为线性
            self.planeWidgetY.SetInputConnection(self.reader1.GetOutputPort())         
            self.planeWidgetY.SetPlaneOrientationToZAxes()#沿Z轴切#############################################    
           #self.planeWidgetY.SetLookupTable( planeWidgetX.GetLookupTable())
           # self.planeWidgetY.SetDefaultRenderer(self.renderer2)#展示在第二个窗口
            self.planeWidgetY.DisplayTextOn()#显示文字
            self.planeWidgetY.On()



    def seedthresholduse(self):
        f=seedthreshold(self.itkimage)
        f.ui()
    def thresholduse(self):
         f=threshold(self.itkimage)
         f.ui()
    def confidenceuse(self):
        f=confidence(self.itkimage)
        f.ui()
        
    def weizhi2(self):  
        freq = int(self.horizontalSlider_3.value())#滑动块的值
        self.itkimage2=self.scan[:,freq,:,]
        self.canvas3.draw_idle()#重新绘制整个图表canvas画布 
        ax = self.fig3.add_subplot(111) 
        ax.imshow(self.itkimage2) 

        self.planeWidgetx.SetSliceIndex(self.horizontalSlider_3.value())#沿法线切片位置
        
        self.planeWidgetx.UpdatePlacement()#更新位置
        self.label_5.setText(" 水平面切片位置 "+str(self.horizontalSlider_3.value()))
    def xianshi2(self):                        
            self.planeWidgetx.SetInteractor(self.iren)           
            self.planeWidgetx.GetPlaneProperty().SetColor(.9, .4, .4)     
            self.planeWidgetx.TextureInterpolateOn()
            self.planeWidgetx.SetResliceInterpolateToLinear()
            self.planeWidgetx.SetInputConnection(self.reader1.GetOutputPort())         
            self.planeWidgetx.SetPlaneOrientationToYAxes()#沿y轴切#############################################
          
            #self.planeWidgetY.SetLookupTable( planeWidgetX.GetLookupTable())
            
            self.planeWidgetx.DisplayTextOn()      
           #self.planeWidgetx.SetDefaultRenderer(self.renderer3)#展示在第二个窗口
            self.planeWidgetx.On()
    def seedthresholduse2(self):
        f=seedthreshold(self.itkimage2)
        f.ui()
    def thresholduse2(self):
         f=threshold(self.itkimage2)
         f.ui()
    def confidenceuse2(self):
        f=confidence(self.itkimage2)
        f.ui()
    def weizhi3(self):
        #切片位置##################################################################
        freq = int(self.horizontalSlider_4.value())#滑动块的值
        self.itkimage3=self.scan[:,:,freq,]
        self.canvas4.draw_idle()#重新绘制整个图表canvas画布 
        ax = self.fig4.add_subplot(111) 
        ax.imshow(self.itkimage3)   

        self.planeWidgetz.SetSliceIndex(self.horizontalSlider_4.value())#沿法线切片位置
        self.planeWidgetz.UpdatePlacement()#更新位置
        self.label_6.setText(" 冠状面切片数= "+str(self.horizontalSlider_4.value()))
    def xianshi3(self):
           # if self.a==1:
              #self.renderer4.RemoveActor(self.croppingVolume)
        self.planeWidgetz.SetSliceIndex(self.horizontalSlider_4.value())
        self.planeWidgetz.SetInteractor(self.iren)
        #self.planeWidgetz.SetKeyPressActivationValue('y')
        #self.planeWidgetz.SetPicker(picker)
        self.planeWidgetz.GetPlaneProperty().SetColor(1,1,0) 
        #self.planeWidgetz.SetTexturePlaneProperty(ipwProp)
        #self.planeWidgetz.TextureInterpolateOn()
        #self.planeWidgetz.SetResliceInterpolateToLinear()
        self.planeWidgetz.SetInputConnection(self.reader1.GetOutputPort())         
        self.planeWidgetz.SetPlaneOrientationToXAxes()#沿X轴切#############################################
        self.planeWidgetz.SetSlicePosition(150)
        #self.planeWidgetz.SetLookupTable( planeWidgetX.GetLookupTable())
        self.planeWidgetz.SetSliceIndex(100)
        self.planeWidgetz.DisplayTextOn()
        
        #self.planeWidgetz.SetDefaultRenderer(self.renderer)#展示在第二个窗口,互动的切片
        self.planeWidgetz.On()
    def seedthresholduse3(self):
        f=seedthreshold(self.itkimage3)
        f.ui()
    def thresholduse3(self):
         f=threshold(self.itkimage3)
         f.ui()
    def confidenceuse3(self):
        f=confidence(self.itkimage3)
        f.ui()
    
import matplotlib.pyplot as plt
import numpy as np
import SimpleITK as sitk
from matplotlib.backend_bases import MouseButton
from matplotlib.widgets import Button, RadioButtons, Slider


class threshold():
    def __init__(self,scan, *args, **kwargs):
        
        self.scan=scan
        self.PT=[]
        self.a=1
        self.b=1
        self.c=1
        self.d=1
        return super().__init__(*args, **kwargs)
    

    def ui(self):
        self.fig, self.ax2 = plt.subplots()#
        plt.subplots_adjust(bottom=0.3)#subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None),调节子图需要
        axcolor = 'lightgoldenrodyellow'
        
        #[起点x,起点y，宽，高]
        axfreq2 = plt.axes([0.2, 0.2, 0.04, 0.6], facecolor=axcolor)#设置x轴的范围为[0.25, 0.1]，y轴的范围为[0.65, 0.03]axes:轴外面的部件
        axfreq3 = plt.axes([0.8, 0.2, 0.04, 0.6], facecolor=axcolor)
       # axfreq4 = plt.axes([0.9, 0.2, 0.04, 0.6], facecolor=axcolor)
        

        self.low = Slider(axfreq2, 'low', 0.0, 1000.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.low.on_changed(self.low1)
        self.high = Slider(axfreq3, 'high', 0.0, 1000.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.high.on_changed(self.high1)
        #self.banjin = Slider(axfreq4, 'banjin', 0.0, 10.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        #self.banjin.on_changed(self.banjin1)

        
        self.ax2.imshow(self.scan) 
        plt.connect('button_press_event', self.dianhudong)

        plt.show()
    def dianhudong(self,event):
        
        if event.button is MouseButton.RIGHT:
            
            self.jieguo=self.yuzhifenge(self.scan,self.a,self.b)
            
            self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
            self.ax2.imshow(self.jieguo)
            
    
    def low1(self,val):
        self.a=int(self.low.val)
        
        self.jieguo=self.yuzhifenge(self.scan,self.a,self.b)

        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布  
        self.ax2.imshow(self.jieguo) 
       # return self.a
    def high1(self,val):
        self.b=int(self.high.val)
          
        self.jieguo=self.yuzhifenge(self.scan,self.a,self.b)
       
        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
        self.ax2.imshow(self.jieguo)   
    def yuzhifenge(self,scan,l,h):    
        scan=sitk.GetImageFromArray(scan)
        thresholdfilterFixedHU = sitk.ThresholdImageFilter()
        thresholdfilterFixedHU.SetOutsideValue(0)#背景填充像素值；]
        thresholdfilterFixedHU.SetLower(l)#阈值；
        thresholdfilterFixedHU.SetUpper(h)
        erzhilubo=thresholdfilterFixedHU.Execute(scan)
        itkimagearray=sitk.GetArrayFromImage(erzhilubo)
        return itkimagearray


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons
import SimpleITK as sitk
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from matplotlib.backend_bases import MouseButton
from segandrender import segment
from segandrender import render
import itk
class seedthreshold():
    def __init__(self,scan, *args, **kwargs):
        self.scan=scan
        self.PT=[]
        self.a=1
        self.b=1
        self.c=1
        self.d=1
        return super().__init__(*args, **kwargs)
    def ui(self):
        self.fig, self.ax2 = plt.subplots()#
        plt.subplots_adjust(bottom=0.3)#subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None),调节子图需要
        axcolor = 'lightgoldenrodyellow'
       # axfreq = plt.axes([0.25, 0.1, 0.65, 0.03], facecolor=axcolor)#[left, bottom, width, height]
        #[起点x,起点y，宽，高]
        axfreq2 = plt.axes([0.2, 0.2, 0.04, 0.6], facecolor=axcolor)#设置x轴的范围为[0.25, 0.1]，y轴的范围为[0.65, 0.03]axes:轴外面的部件
        axfreq3 = plt.axes([0.8, 0.2, 0.04, 0.6], facecolor=axcolor)
      
        #self.sfreq = Slider(axfreq, 'Freq', 0.0, 100.0,valfmt='% .2f', valinit=0, valstep=1)#
        

        self.low = Slider(axfreq2, 'low', 0.0, 1500.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.low.on_changed(self.low1)
        self.high = Slider(axfreq3, 'high', 0.0, 1500.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.high.on_changed(self.high1)
        

       
        self.ax2.imshow(self.scan) 
        plt.connect('button_press_event', self.dianhudong)
        plt.connect('button_press_event',self.banjin1)
        plt.show()
    def dianhudong(self,event):
        self.PT2=[]
        if event.button is MouseButton.RIGHT:
            if self.PT==[]:
                    self.PT.append([int(event.xdata),int(event.ydata)])
                    self.PT2.append(int(event.xdata))
                    self.PT2.append(int(event.ydata))
                    self.PT2.append(self.freq)
            else:
               self.PT.clear()
               self.PT2.clear()
               self.PT.append([int(event.xdata),int(event.ydata)])
               
            print("add position:" ,event.button,event.xdata, event.ydata)
            print(self.PT)
            print(self.PT2)
            self.jieguo=self.zhongzifenge(self.scan,self.PT,self.a,self.b)
            
            self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
            self.ax2.imshow(self.jieguo)
 

    def low1(self,val):
        self.a=int(self.low.val)
        
        self.jieguo=self.zhongzifenge(self.scan,self.PT,self.a,self.b)

        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布  
        self.ax2.imshow(self.jieguo) 
       # return self.a
    def high1(self,val):
        self.b=int(self.high.val)
          
        self.jieguo=self.zhongzifenge(self.scan,self.PT,self.a,self.b)
       
        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
        self.ax2.imshow(self.jieguo)   
    def banjin1(self,event):
        
        if event.button is MouseButton.MIDDLE:          
           print(self.PT)
           self.PT2.append(int(event.xdata))
           self.PT2.append(int(event.ydata))
           self.PT2.append(self.freq)
           print(self.PT2)
           segmented_filename = "segmented.mha"
          
           output = segment( self.file,self.PT2,self.b,self.a)
           itk.imwrite(output, segmented_filename)  # Save as uint8
           render(self.file, segmented_filename)
       
   
      
    def zhongzifenge(self,scan,seed,l,h):
        itkimagepicture=sitk.GetImageFromArray(scan)
        seg=sitk.ConnectedThreshold(itkimagepicture, seedList=seed, lower=l, upper=h)#阈值上下限（）灰度值
        implicit=sitk.GetArrayFromImage(seg)
        return implicit
        



        


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider, Button, RadioButtons
import SimpleITK as sitk
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider
from matplotlib.backend_bases import MouseButton
class confidence():
    def __init__(self,scan, *args, **kwargs):
        
        self.scan=scan
        self.PT=[]
        self.a=1
        self.b=1
        self.c=1
        self.d=1
        return super().__init__(*args, **kwargs)
   

    def ui(self):
        self.fig, self.ax2 = plt.subplots()#
        plt.subplots_adjust(bottom=0.3)#subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=None),调节子图需要
        axcolor = 'lightgoldenrodyellow'
       
        #[起点x,起点y，宽，高]
        axfreq2 = plt.axes([0.2, 0.2, 0.04, 0.6], facecolor=axcolor)#设置x轴的范围为[0.25, 0.1]，y轴的范围为[0.65, 0.03]axes:轴外面的部件
        axfreq3 = plt.axes([0.8, 0.2, 0.04, 0.6], facecolor=axcolor)
        axfreq4 = plt.axes([0.9, 0.2, 0.04, 0.6], facecolor=axcolor)
      

        self.diedai = Slider(axfreq2, 'diedai', 0.0, 10.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.diedai.on_changed(self.diedai1)
        self.chengzi = Slider(axfreq3, 'chengzi', 0.0, 10.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.chengzi.on_changed(self.chengzi1)
        self.banjin = Slider(axfreq4, 'banjin', 0.0, 10.0,valfmt='% .2f', valinit=0, valstep=1,orientation='vertical')#
        self.banjin.on_changed(self.banjin1)

        
        self.ax2.imshow(self.scan) 
        plt.connect('button_press_event', self.dianhudong)

        plt.show()
    def dianhudong(self,event):
        
        if event.button is MouseButton.RIGHT:
            if self.PT==[]:
                    self.PT.append([int(event.xdata),int(event.ydata)])
            else:
               self.PT.clear()
               self.PT.append([int(event.xdata),int(event.ydata)])
            print("add position:" ,event.button,event.xdata, event.ydata)
            print(self.PT)
            self.jieguo=self.quyuzengzhang(self.scan,self.PT,self.a,self.b,self.c)
            self.jieguo=self.jieguo
            self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
            self.ax2.imshow(self.jieguo)
            
    

    def diedai1(self,val):
        self.a=int(self.diedai.val)
        self.jieguo=self.quyuzengzhang(self.scan,self.PT,self.a,self.b,self.c)
        self.jieguo=self.itkimage2+self.jieguo
        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布  
        self.ax2.imshow(self.jieguo) 
       # return self.a
    def chengzi1(self,val):
        self.b=int(self.diedai.val)
          
        self.jieguo=self.quyuzengzhang(self.scan,self.PT,self.a,self.b,self.c)
        self.jieguo=self.itkimage2+self.jieguo
        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画布
        self.ax2.imshow(self.jieguo)   
    def banjin1(self,val):
        self.c=int(self.diedai.val)
          
        self.jieguo=self.quyuzengzhang(self.scan,self.PT,self.a,self.b,self.c)
        self.jieguo=self.itkimage2+self.jieguo
        self.fig.canvas.draw_idle()#重新绘制整个图表canvas画
        self.ax2.imshow(self.jieguo)      
   
       
    def quyuzengzhang(self,scan,seed,j,h,l):
       # itkimage2=scan[i,:,:]
        itkimagepicture=sitk.GetImageFromArray(scan)
        seg_implicit_thresholds = sitk.ConfidenceConnected(itkimagepicture,seed, numberOfIterations=j,multiplier=h,
                                                            initialNeighborhoodRadius=l,
                                                            replaceValue=255)                                                                                                                                        
        implicit=sitk.GetArrayFromImage(seg_implicit_thresholds)
        return implicit
   


        

if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv) 
    win =MainWindow()
    win.show()
    sys.exit(app.exec_())
